import {
  defineNuxtModule,
  addPlugin,
  createResolver,
  addComponentsDir,
  addImports,
  addTemplate,
  addTypeTemplate,
} from '@nuxt/kit'

import type { ModuleOptions } from './types'

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-echarts',
    configKey: 'echarts',
    compatibility: {
      // Semver version of supported nuxt versions
      nuxt: '^3.0.0',
    },
  },
  // Default configuration options of the Nuxt module
  defaults: {
    renderer: 'canvas',
  },
  setup(options, nuxt) {
    const { resolve } = createResolver(import.meta.url)

    // Do not add the extension since the `.ts` will be transpiled to `.mjs` after `npm run prepack`
    addPlugin(resolve('./runtime/plugin'))
    addComponentsDir({ path: resolve('runtime/components') })
    nuxt.options.css.push(resolve('./runtime/style.css'))

    const rendererName =
      options.renderer === 'canvas' ? 'CanvasRenderer' : 'SVGRenderer'
    const joinedChartNames =
      options.charts?.map((name) => `${name},`).join('\n') || ''
    const joinedComponentNames =
      options.components?.map((name) => `${name},`).join('\n') || ''
    const joinedFeatureNames =
      options.features?.map((name) => `${name},`).join('\n') || ''
    addTemplate({
      filename: 'echarts.mjs',
      write: true,
      getContents: () => `// Generated by nuxt-echarts
      import { use } from 'echarts/core'
      import { ${rendererName} } from 'echarts/renderers'
      import {
        ${joinedChartNames}
      } from 'echarts/charts'
      import {
        ${joinedComponentNames}
      } from 'echarts/components'
      import {
        ${joinedFeatureNames}
      } from 'echarts/features'
      use([
        ${rendererName},
        ${joinedChartNames}
        ${joinedComponentNames}
        ${joinedFeatureNames}
      ])`,
    })

    if (options.charts || options.components) {
      const chartOptionNames = options.charts?.map(
        (name) => `${name.slice(0, -5)}SeriesOption`,
      )
      const componentOptionNames = options.components?.map(
        (name) => `${name}Option`,
      )
      addTypeTemplate({
        filename: 'types/nuxt-echarts.d.ts',
        getContents: () => `// Generated by nuxt-echarts
        import type { ComposeOption } from 'echarts/core'
        import type {
          ${chartOptionNames?.map((name) => `${name},`).join('\n')}
        } from 'echarts/charts'
        import type {
          ${componentOptionNames?.map((name) => `${name},`).join('\n')}
        } from 'echarts/components'
        declare global {
          export type ECOption = ComposeOption<
            ${chartOptionNames?.map((name) => `| ${name}`).join('\n')}
            ${componentOptionNames?.map((name) => `| ${name}`).join('\n')}
          >
        }
        export {}`,
      })
    }

    const injectionKeys = [
      'THEME_KEY',
      'INIT_OPTIONS_KEY',
      'UPDATE_OPTIONS_KEY',
      'LOADING_OPTIONS_KEY',
    ]
    injectionKeys.forEach((name) =>
      addImports({ name, from: resolve('./runtime/utils/injection') }),
    )

    if (options.ssr) {
      //@ts-expect-error We create the `experimental` object if it doesn't exist yet
      nuxt.options.experimental ||= {}
      nuxt.options.experimental.componentIslands = true
    }
  },
})
